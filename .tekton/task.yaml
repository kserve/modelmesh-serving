apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: test
spec:
  params:
    - name: repository
      description: the git repo
    - name: revision
      description: the revision
      default: master
    - name: apikey
      description: the ibmcloud api key
    - name: registry-namespace
      description: the ibmcloud registry namespace
    - name: docker-username
      description: for ibm container registry
      default: iamapikey
    - name: docker-password
      description: iam api key
    - name: resource-group
      description: resource group
      default: "Default"
    - name: org
      description: organization
    - name: region
      description: region
      default: "us-south"
    - name: space
      description: space
    - name: archive-dir
      description: archive directory
      default: "."
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: run-setup-script
      image: docker.io/aipipeline/pipeline-base-image:1.2
      env:
        - name: DOCKER_USERNAME
          value: $(params.docker-username)
        - name: DOCKER_PASSWORD
          value: $(params.docker-password)
        - name: IBM_CLOUD_API_KEY
          value: $(params.apikey)
        - name: GIT_URL
          value: $(params.repository)
        - name: REGION
          value: $(params.region)
        - name: ORG
          value: $(params.org)
        - name: SPACE
          value: $(params.space)
        - name: RESOURCE_GROUP
          value: $(params.resource-group)
        - name: GIT_BRANCH
          value: $(params.revision)
        - name: REGISTER_NAMESPACE
          value: $(params.registry-namespace)
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: ARCHIVE_DIR
          value: $(params.archive-dir)
      command: ["/bin/bash", "-c"]
      args:
        - set -ex;
          cd /artifacts && git clone -q -b $GIT_BRANCH $GIT_URL .;
          GIT_COMMIT=$(git rev-parse HEAD);
          source ./scripts/deploy/iks/run-setup.sh;
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-images-dnd
spec:
  params:
    - name: apikey
      description: the ibmcloud api key
    - name: image-name
      description: image name
    - name: docker-root
      description: root directory for docker
      default: .
    - name: docker-file
      description: dockerfile
    - name: registry-url
      description: container registry url
    - name: registry-namespace
      description: the ibmcloud registry namespace
    - name: docker-username
      description: for ibm container registry
      default: iamapikey
    - name: docker-password
      description: iam api key
    - name: run-task
      description: "execution task: artifact or image"
    - name: archive-dir
      description: archive directory
      default: "."
    - name: build-args
      description: docker build args
      default: ""
    - name: dockerhub-namespace
      description: docker hub namespace
    - name: dockerhub-password
      description: docker hub password
    - name: dockerhub-username
      description: docker hub username
    - name: dockersandbox-username
      description: docker sandbox username
    - name: dockersandbox-password
      description: docker sandbox password
    - name: dockersandbox-namespace
      description: docker sandbox namespace
    - name: publish-tag
      description: image publish tag
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: process-image
      image: docker.io/aipipeline/pipeline-base-image:1.2
      env:
        - name: DOCKER_USERNAME
          value: $(params.docker-username)
        - name: DOCKER_PASSWORD
          value: $(params.docker-password)
        - name: IBM_CLOUD_API_KEY
          value: $(params.apikey)
        - name: IMAGE_NAME
          value: $(params.image-name)
        - name: DOCKER_ROOT
          value: $(params.docker-root)
        - name: DOCKER_FILE
          value: $(params.docker-file)
        - name: REGISTRY_URL
          value: $(params.registry-url)
        - name: REGISTRY_NAMESPACE
          value: $(params.registry-namespace)
        - name: RUN_TASK
          value: $(params.run-task)
        - name: ARCHIVE_DIR
          value: $(params.archive-dir)
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: DOCKER_HOST
          value: "tcp://localhost:2376"
        # Verify TLS.
        - name: DOCKER_TLS_VERIFY
          value: "1"
        # Use the certs generated by the sidecar daemon.
        - name: DOCKER_CERT_PATH
          value: /certs/client
        - name: DOCKERHUB_USERNAME
          value: $(params.dockerhub-username)
        - name: DOCKERHUB_TOKEN
          value: $(params.dockerhub-password)
        - name: DOCKERHUB_NAMESPACE
          value: $(params.dockerhub-namespace)
        - name: DOCKERSANDBOX_USERNAME
          value: $(params.dockersandbox-username)
        - name: DOCKERSANDBOX_TOKEN
          value: $(params.dockersandbox-password)
        - name: DOCKERSANDBOX_NAMESPACE
          value: $(params.dockersandbox-namespace)
        - name: PUBLISH_TAG
          value: $(params.publish-tag)
      command: ["/bin/bash", "-c"]
      args:
        - set -ex;
          cd /artifacts && source build.properties;
          export BUILD_ARG_LIST="$(params.build-args)";
          source scripts/deploy/iks/build-image-dind.sh;
      volumeMounts:
        - mountPath: /certs/client
          name: dind-certs
  sidecars:
    - image: icr.io/continuous-delivery/pipeline/docker:19.03.15-dind
      name: server
      securityContext:
        privileged: true
      command: ["sh", "-c"]
      env:
        # Write generated certs to the path shared with the client.
        - name: DOCKER_TLS_CERTDIR
          value: /certs
      args:
        # Set the MTU to a value that is containable in the ibmcloud calico mtu value
        # References:
        # - https://liejuntao001.medium.com/fix-docker-in-docker-network-issue-in-kubernetes-cc18c229d9e5
        # - https://cloud.ibm.com/docs/containers?topic=containers-kernel#calico-mtu
        #
        # Use a workaround to by pass virtio-fs for Continuous Delivery shared workers
        - if [[ $(df -PT /var/lib/docker | awk 'NR==2 {print $2}') == virtiofs ]]; then
            apk add e2fsprogs &&
            truncate -s 20G /tmp/disk.img &&
            mkfs.ext4 /tmp/disk.img &&
            mount /tmp/disk.img /var/lib/docker; fi &&
          dockerd-entrypoint.sh --mtu=1400;
      volumeMounts:
        - mountPath: /certs/client
          name: dind-certs
      # Wait for the dind daemon to generate the certs it will share with the client.
      readinessProbe:
        initialDelaySeconds: 2
        periodSeconds: 1
        exec:
          command: ["ls", "/certs/client/ca.pem"]
  volumes:
    - name: dind-certs
      emptyDir: {}
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy
spec:
  params:
    - name: apikey
      description: the ibmcloud api key
    - name: kubernetes-cluster
      description: cluster name
    - name: serving-ns
      description: kubeflow namespace
      default: modelmesh-serving
    - name: docker-username
      description: for ibm container registry
      default: iamapikey
    - name: docker-password
      description: iam api key
    - name: archive-dir
      description: archive directory
      default: "."
    - name: dockersandbox-namespace
      description: docker sandbox namespace      
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: deploy-modelmesh-serving
      image: docker.io/aipipeline/pipeline-base-image:1.2
      env:
        - name: DOCKER_USERNAME
          value: $(params.docker-username)
        - name: DOCKER_PASSWORD
          value: $(params.docker-password)
        - name: IBM_CLOUD_API_KEY
          value: $(params.apikey)
        - name: SERVING_KUBERNETES_CLUSTER_NAME
          value: $(params.kubernetes-cluster)
        - name: ARCHIVE_DIR
          value: $(params.archive-dir)
        - name: SERVING_NS
          value: $(params.serving-ns)
        - name: DOCKERSANDBOX_NAMESPACE
          value: $(params.dockersandbox-namespace)
      command: ["/bin/bash", "-c"]
      args:
        - set -ex;
          cd /artifacts && source build.properties;
          source ./scripts/deploy/iks/deploy-mm-serving.sh;
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: e2e-test
spec:
  params:
    - name: apikey
      description: the ibmcloud api key
    - name: kubernetes-cluster
      description: cluster name
    - name: serving-ns
      description: kubeflow namespace
      default: kubeflow
    - name: archive-dir
      description: archive directory
      default: "."
    - name: slack-webhook
      description: webhook URL
      default: ""
    - name: slack-channel
      description: slack channel
      default: ""
    - name: test-script
      description: a shell script to run the test case
      default: ""
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: run-test
      image: docker.io/aipipeline/pipeline-base-image:1.2
      env:
        - name: IBM_CLOUD_API_KEY
          value: $(params.apikey)
        - name: SERVING_KUBERNETES_CLUSTER_NAME
          value: $(params.kubernetes-cluster)
        - name: ARCHIVE_DIR
          value: $(params.archive-dir)
        - name: SERVING_NS
          value: $(params.serving-ns)
        - name: SLACK_WEBHOOK
          value: $(params.slack-webhook)
        - name: SLACK_CHANNEL
          value: $(params.slack-channel)
        - name: PIPELINE_URL
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: TEST_SCRIPT
          value: $(params.test-script)
      command: ["/bin/bash", "-c"]
      args:
        - set -ex;
          ls -lrt;
          cd /artifacts && source build.properties;
          source ./$(params.test-script);
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: run-perf-test
spec:
  params:
    - name: apikey
      description: the ibmcloud api key
    - name: serving-ns
      description: kubeflow namespace
      default: kubeflow
    - name: archive-dir
      description: archive directory
      default: "."
    - name: kubernetes-cluster
      description: cluster name
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: run-performance-test
      image: docker.io/aipipeline/pipeline-base-image:1.2
      env:
        - name: SERVING_KUBERNETES_CLUSTER_NAME
          value: $(params.kubernetes-cluster)
        - name: IBM_CLOUD_API_KEY
          value: $(params.apikey)
        - name: ARCHIVE_DIR
          value: $(params.archive-dir)
        - name: SERVING_NS
          value: $(params.serving-ns)
      command: ["/bin/bash", "-c"]
      args:
        - set -ex;
          cd /artifacts && source build.properties;
          source ./scripts/deploy/iks/run-perf-test.sh;
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: undeploy
spec:
  params:
    - name: apikey
      description: the ibmcloud api key
    - name: serving-ns
      description: kubeflow namespace
      default: kubeflow
    - name: archive-dir
      description: archive directory
      default: "."
    - name: kubernetes-cluster
      description: cluster name
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: undeploy-modelmesh-serving
      image: docker.io/aipipeline/pipeline-base-image:1.2
      env:
        - name: SERVING_KUBERNETES_CLUSTER_NAME
          value: $(params.kubernetes-cluster)
        - name: IBM_CLOUD_API_KEY
          value: $(params.apikey)
        - name: ARCHIVE_DIR
          value: $(params.archive-dir)
        - name: SERVING_NS
          value: $(params.serving-ns)
      command: ["/bin/bash", "-c"]
      args:
        - set -ex;
          cd /artifacts && source build.properties;
          source ./scripts/deploy/iks/undeploy-mm-serving.sh;
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: iks-test
spec:
  params:
    - name: apikey
      description: the ibmcloud api key
    - name: kubernetes-cluster
      description: cluster name
    - name: serving-ns
      description: kubeflow namespace
      default: kubeflow
    - name: resource-group
      description: resource group
      default: default
    - name: org
      description: organization
    - name: region
      description: region
      default: "us-south"
    - name: space
      description: space
    - name: archive-dir
      description: archive directory
      default: "."
    - name: test-commands
      description: testing commands
      default: ""
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: run-cleanup-script
      image: docker.io/aipipeline/pipeline-base-image:1.2
      env:
        - name: IBM_CLOUD_API_KEY
          value: $(params.apikey)
        - name: SERVING_KUBERNETES_CLUSTER_NAME
          value: $(params.kubernetes-cluster)
        - name: ARCHIVE_DIR
          value: $(params.archive-dir)
        - name: SERVING_NS
          value: $(params.serving-ns)
        - name: REGION
          value: $(params.region)
        - name: ORG
          value: $(params.org)
        - name: SPACE
          value: $(params.space)
        - name: RESOURCE_GROUP
          value: $(params.resource-group)
        - name: PIPELINE_URL
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -ex;
          cd /artifacts && source build.properties

          retry() {
            local max=$1; shift
            local interval=$1; shift

            until "$@"; do
              echo "trying.."
              max=$((max-1))
              if [[ "$max" -eq 0 ]]; then
                return 1
              fi
              sleep "$interval"
            done
          }

          # Set up kubernetes config
          retry 3 3 ibmcloud login --apikey "${IBM_CLOUD_API_KEY}" --no-region
          retry 3 3 ibmcloud target -r "$REGION" -g "$RESOURCE_GROUP"
          retry 3 3 ibmcloud ks cluster config -c "$SERVING_KUBERNETES_CLUSTER_NAME"

          $(params.test-commands)
